//
// Helper Functions APP Admin
//
@function app-get-color($colors, $key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}


@function app-unitless($number) {
  @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function app-get($map, $keys...) {
  @if length($keys) == 1 {
      $keys: nth($keys, 1);
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
      @for $i from 2 through $length {
          @if $get != null and type-of($get) == 'map' {
              $warn: $warn + "->#{nth($keys, $i)}";
              $get: map-get($get, nth($keys, $i));

              @if $get == null {
                  @return null;
              }
          }
          @else {
              @return app-get-warning($warn, $get, nth($keys, $i));
          }
      }
  }

  @return $get;
}

@function app-has($map, $keys...) {
  @if length($keys) == 1 {
      $keys: nth($keys, 1);
  }

  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
      @for $i from 2 through $length {
          @if $get != null and type-of($get) == 'map' {
              $warn: $warn + "->#{nth($keys, $i)}";
              $get: map-get($get, nth($keys, $i));

              @if $get == null {
                  @return false;
              }
          }
          @else {
               @return false;
          }
      }
  }

  @if $get != null {
      @return true;
  }
  @else {
      @return false;
  }
}

@function app-get-warning($warn, $get, $key) {
  @if $get == null {
      @warn "Map has no value for key search `#{$warn}`";
  }
  @else if type-of($get) != 'map' {
      @warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{$key}`";
  }
  @return null;
}

@function app-display-color($color) {
  @if (lightness( $color ) > 50) {
    @return darken($color, 50%);
  }
  @else {
    @return lighten($color, 50%);
  }
}

@function app-state-color($name, $type: null) {
  @if ($type == null) {
      $type: base;
  }

  @return app-get($app-state-colors, $name, $type);
}

@function app-brand-color($type: null) {
  @return app-state-color(brand, $type);
}

@function app-base-color($type, $level) {
  @return app-get($app-base-colors, $type, $level);
}

@function app-media-breakpoint($type) {
  @if (app-has($app-media-breakpoints, $type)) {
      @return app-get($app-media-breakpoints, $type);
  } @else {
      @return $type;
  }
}